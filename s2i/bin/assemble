#!/bin/bash -e
#
# S2I assemble script for the 's2i-georchestra' image.
# The 'assemble' script builds your application source so that it is ready to run.
#
# For more information refer to the documentation:
#	https://github.com/openshift/source-to-image/blob/master/docs/builder_image.md
#

# restore maven dependencies downloaded in a previous build,
# so they do not have to be downloaded again.
# /opt/s2i/destination/artifacts will only be present in the incremental build scenario
# in which the target image name is an existing docker image which contains
# dependencies from a prior build execution.
function restore_saved_artifacts() {
  if [ "$(ls -A /opt/s2i/destination/artifacts/ 2>/dev/null)" ]; then
    echo -n "Restoring saved artifacts from prior build..."
    mv /opt/s2i/destination/artifacts/.m2/repository $HOME/.m2_repo
  fi
}

# If the 's2i-georchestra' assemble script is executed with the '-h' flag, print the usage.
if [[ "$1" == "-h" ]]; then
	exec /usr/libexec/s2i/usage
fi

# Restore artifacts from the previous build (if they exist).
#
if [ "$(ls /tmp/artifacts/ 2>/dev/null)" ]; then
  echo "---> Restoring build artifacts..."
  mv /tmp/artifacts/. ./
fi

# restore any maven dependencies which will be present if this is an
# incremental build
restore_saved_artifacts

echo "---> Installing application source..."
rsync -rtv /tmp/src/ .
rm -rf /tmp/src


echo "---> Building application from source..."
mvn clean install -B -Dmaven.repo.local=./.m2_repo -Psentry-log4j,docker -DskipTests
rm -rf .m2_repo
cp ./security-proxy/target/ROOT.war            \
   ./console/target/console.war                \
   ./geonetwork/web/target/geonetwork.war      \
   ./analytics/target/analytics.war            \
   ./mapfishapp/target/mapfishapp.war          \
   ./geoserver/webapp/target/geoserver.war     \
   ./geowebcache-webapp/target/geowebcache.war \
   ./atlas/target/atlas.war                    \
   ./header/target/header.war                  \
   ./cas-server-webapp/target/cas.war          \
   ./extractorapp/target/extractorapp.war      \
   /tmp/deliverables/
rm -rf /opt/app-root/src/
